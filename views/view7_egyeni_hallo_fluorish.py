import streamlit as st
import pandas as pd
import networkx as nx
from pyvis.network import Network
import streamlit.components.v1 as components
import numpy as np
from data import load_data
import os
import json

def generate_network_html(data, template_path, output_path):
    """
    Generate a network visualization HTML file from a template and data.
    
    Args:
        data: List of dictionaries containing network data
        template_path: Path to the HTML template file
        output_path: Path to write the output HTML file
    """
    # Convert data to JSON string
    data_json = json.dumps(data, ensure_ascii=False, indent=4)
    
    # Read the template file
    with open(template_path, 'r', encoding='utf-8') as f:
        template_content = f.read()
    
    # Replace the placeholder with the actual data
    output_content = template_content.replace('/* PLACEHOLDER_FOR_DATA */', data_json)
    
    # Write the output file
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(output_content)
    
    print(f"Generated network visualization at: {output_path}")


st.fragment()
def export_egyeni_hallo():

    # üìå Data bet√∂lt√©se
    data = load_data()
    # üìå Streamlit fel√ºlet
    st.title("üìä Interakt√≠v Megb√≠z√°si H√°l√≥zat")
    st.write("Az al√°bbi √°bra a kiv√°lasztott c√©gek k√∂zbeszerz√©seit √©s kapcsolatait mutatja.")


    # üìå Leg√∂rd√ºl≈ë lista a c√©gek kiv√°laszt√°s√°ra
    sorted_companies = pd.concat([
        pd.Series(data['vezetoAjanlatkero'].unique()),  # √Åtalak√≠tjuk Series t√≠pusra
        pd.Series(data['nyertes'].unique())  # √Åtalak√≠tjuk Series t√≠pusra
    ]).unique()  # Minden c√©g az aj√°nlatk√©r≈ëk √©s aj√°nlattev≈ëk oszlop√°b√≥l

    # üìå Kiv√°lasztott c√©gek
    selected_companies = st.multiselect("V√°lassz c√©geket:", sorted_companies, default="Nemzeti Kommunik√°ci√≥s Hivatal")


    # üìå V√°laszthat√≥ n√≥d m√©ret: kiutalt vagy befoly√≥ p√©nz
    size_option = st.selectbox("V√°laszd meg a csom√≥pontok m√©ret√©t:", ["Kiutalt √∂sszeg", "Befoly√≥ √∂sszeg"])

    # üìå K√∂zvetlen kapcsolatok vagy plusz r√©teg hozz√°ad√°sa
    direct_connections_only = st.checkbox("Plusz egy r√©teg", value=True)


    # üìå Start gomb
    start_button = st.button("Start")

    if start_button:
        # üìå Adatok sz≈±r√©se a kiv√°lasztott c√©gekre
        filtered_data = data[
            data['vezetoAjanlatkero'].isin(selected_companies) | data['nyertes'].isin(selected_companies)
        ]

        if direct_connections_only==False:
            # üìå Ha csak k√∂zvetlen kapcsolatok sz√ºks√©gesek, akkor csak az adott c√©gek k√∂zvetlen kapcsolatai
            additional_companies = selected_companies
        else:
            # üìå Tov√°bbi c√©gek hozz√°ad√°sa, melyek kapcsol√≥dnak a kiv√°lasztott c√©gekhez
            additional_companies = set(filtered_data['vezetoAjanlatkero']).union(filtered_data['nyertes'])

        # üìå Adatok √∫jra sz≈±r√©se, hogy a kiv√°lasztott c√©gek √©s azok kapcsolatai ker√ºljenek be
        network_df = data[
            data['vezetoAjanlatkero'].isin(additional_companies) | data['nyertes'].isin(additional_companies)
        ]


        network_df = network_df[['vezetoAjanlatkero', 'nyertes', 'nettoOsszegHUF', 'ekrAzonosito']]
        # gorup by and create the data
        network_df = (network_df.groupby(['vezetoAjanlatkero', 'nyertes'], as_index=False)
        .agg(
            osszeg=('nettoOsszegHUF', 'sum'),
            palyazatokSzama=('ekrAzonosito', 'count')
        )
        .sort_values(by='osszeg', ascending=False)
        .reset_index(drop=True)
        )

        # rename column vezetoAjanlatkero to megbizo
        network_df.rename(columns={'vezetoAjanlatkero': 'megbizo', 'nyertes': 'megbizott'}, inplace=True)
           

        if len(network_df) > 0:
            # generate network with the template
            template_path = '/templates/network_template.html'
            output_path = 'temp_network.html'
            generate_network_html(network_df.to_dict('records'), template_path, output_path)

#            if os.path.exists(output_path):
#                with open(output_path, 'r', encoding='utf-8') as f:
#                    html_content = f.read()
#                components.html(html_content, height=800, width=1200)
#            else:
#                st.warning("Nincs el√©rhet≈ë h√°l√≥zati vizualiz√°ci√≥.")

            # download the output file
            with open(output_path, 'rb') as f:
                st.download_button(
                    label="Let√∂lt√©s",
                    data=f,
                    file_name="network_visualization.html",
                    mime="text/html"
                )



   
        else:
            st.warning("Nincsenek kapcsolatok a kiv√°lasztott c√©gek k√∂z√∂tt.")
    else:
        st.warning("K√©rlek v√°lassz c√©geket √©s kattints a 'Start' gombra.")




         

export_egyeni_hallo()